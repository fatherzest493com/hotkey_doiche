using System;
using System.ComponentModel;
using System.Net.Http;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;

namespace HotkeyManager
{
    public enum HotkeyType
    {
        None,      // Kh√¥ng c√≥ hotkey n√†o ƒë∆∞·ª£c nh·∫•n
        Show2FA,   // Ctrl+K r·ªìi Ctrl+8 trong th·ªùi gian 2.5 gi√¢y
        ToggleTray // Ctrl+K r·ªìi Ctrl+T trong th·ªùi gian 2.5 gi√¢y
    }

    public partial class Form1 : Form
    {
        // DLL import ƒë·ªÉ ki·ªÉm tra ph√≠m nh·∫•n
        [DllImport("user32.dll")]
        static extern short GetAsyncKeyState(Keys vKey);

        private System.Windows.Forms.Timer hotkeyTimer = null!;
        private bool hasPressedK = false;
        private DateTime lastK = DateTime.MinValue;
        private NotifyIcon trayIcon = null!;
        private AppConfig config = null!;
        private SecurityManager security = null!;

        public Form1()
        {
            InitializeComponent();
            config = AppConfig.Load(); // T·∫£i c√†i ƒë·∫∑t  
            security = new SecurityManager(config); // Kh·ªüi t·∫°o security manager
            InitializeHiddenForm();
            InitTimer();
            InitTrayIcon();
        }

        void InitializeHiddenForm()
        {
            // ·∫®n form ch√≠nh
            this.WindowState = FormWindowState.Minimized;
            this.ShowInTaskbar = false;
            this.Visible = false;
        }

        void InitTimer()
        {
            hotkeyTimer = new System.Windows.Forms.Timer { Interval = 50 };
            hotkeyTimer.Tick += HotkeyTimer_Tick;
            hotkeyTimer.Start();
        }

        void InitTrayIcon()
        {
            trayIcon = new NotifyIcon();
            trayIcon.Icon = SystemIcons.Application; // S·ª≠ d·ª•ng icon m·∫∑c ƒë·ªãnh
            trayIcon.Text = "Hotkey Manager - Ch·∫°y ng·∫ßm";
            trayIcon.Visible = config.ShowTrayIcon; // S·ª≠ d·ª•ng c√†i ƒë·∫∑t t·ª´ config

            // T·∫°o context menu cho tray icon
            var contextMenu = new ContextMenuStrip();
            
            var statusItem = new ToolStripMenuItem($"Tr·∫°ng th√°i: {security.GetStatusMessage()}");
            statusItem.Enabled = false; // Ch·ªâ hi·ªÉn th·ªã, kh√¥ng click ƒë∆∞·ª£c
            
            var toggleTrayItem = new ToolStripMenuItem("·∫®n tray icon");
            toggleTrayItem.Click += (s, e) => ToggleTrayIcon();
            
            var helpItem = new ToolStripMenuItem("H∆∞·ªõng d·∫´n");
            helpItem.Click += (s, e) => ShowHelp();
            
            var resetSecurityItem = new ToolStripMenuItem("Reset b·∫£o m·∫≠t");
            resetSecurityItem.Click += (s, e) => ResetSecurity();
            resetSecurityItem.Enabled = security.FailedAttempts > 0; // Ch·ªâ hi·ªán khi c√≥ l·ªói
            
            var exitItem = new ToolStripMenuItem("Tho√°t");
            exitItem.Click += (s, e) => {
                trayIcon.Visible = false;
                Application.Exit();
            };
            
            contextMenu.Items.Add(statusItem);
            contextMenu.Items.Add(new ToolStripSeparator());
            contextMenu.Items.Add(toggleTrayItem);
            contextMenu.Items.Add(helpItem);
            contextMenu.Items.Add(resetSecurityItem);
            contextMenu.Items.Add(new ToolStripSeparator());
            contextMenu.Items.Add(exitItem);
            trayIcon.ContextMenuStrip = contextMenu;

            // Double-click ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o
            trayIcon.DoubleClick += (s, e) => ShowHelp();
        }



        private async void HotkeyTimer_Tick(object? sender, EventArgs e)
        {
            var hotkeyResult = CheckHotkeySequence(ref hasPressedK, ref lastK);
            
            if (hotkeyResult == HotkeyType.Show2FA)
            {
                hotkeyTimer.Stop(); // D·ª´ng timer t·∫°m th·ªùi khi k√≠ch ho·∫°t hotkey

                // Ki·ªÉm tra security lockdown tr∆∞·ªõc khi hi·ªÉn th·ªã popup
                if (security.IsLocked)
                {
                    ShowNotification($"üîí SECURITY LOCKDOWN!\n{security.GetStatusMessage()}");
                    await Task.Delay(500);
                    hotkeyTimer.Start();
                    return;
                }

                string? entered2FA = TwoFAPopup.ShowPopup(security);

                if (!string.IsNullOrEmpty(entered2FA))
                {
                    if (Verify2FA(entered2FA))
                    {
                        // ‚úÖ Nh·∫≠p ƒë√∫ng 2FA
                        security.OnSuccessfulAuth();
                        ShowNotification("‚úÖ 2FA x√°c th·ª±c th√†nh c√¥ng!");
                        await SendD1RequestAsync();
                    }
                    else
                    {
                        // ‚ùå Nh·∫≠p sai 2FA
                        bool isSecurityBreach = await security.OnFailedAuthAsync(entered2FA);
                        
                        if (isSecurityBreach)
                        {
                            ShowNotification($"üö® B·∫¢O M·∫¨T VI PH·∫†M!\n{security.GetStatusMessage()}");
                        }
                        else
                        {
                            ShowNotification($"‚ùå M√£ 2FA kh√¥ng ƒë√∫ng!\n{security.GetStatusMessage()}");
                        }
                    }
                }

                await Task.Delay(500);
                hotkeyTimer.Start(); // Kh·ªüi ƒë·ªông l·∫°i timer
            }
            else if (hotkeyResult == HotkeyType.ToggleTray)
            {
                ToggleTrayIcon();
                await Task.Delay(500);
            }
        }

        /// <summary>
        /// Toggle tray icon visibility
        /// </summary>
        private void ToggleTrayIcon()
        {
            config.ToggleTrayIcon();
            trayIcon.Visible = config.ShowTrayIcon;
            
            // Hi·ªÉn th·ªã notification ƒë·ªÉ ng∆∞·ªùi d√πng bi·∫øt
            ShowNotification(config.ShowTrayIcon ? "Tray icon ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã" : 
                           "Tray icon ƒë√£ ƒë∆∞·ª£c ·∫©n. Nh·∫•n Ctrl+K r·ªìi Ctrl+T ƒë·ªÉ hi·ªÉn th·ªã l·∫°i.");
        }

        /// <summary>
        /// Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        /// </summary>
        private void ShowHelp()
        {
            ShowNotification("üîê Hotkey Manager\n" +
                           "‚Ä¢ Ctrl+K ‚Üí Ctrl+8: Hi·ªÉn th·ªã popup 2FA\n" +
                           "‚Ä¢ Ctrl+K ‚Üí Ctrl+T: ·∫®n/hi·ªán tray icon\n" +
                           "‚Ä¢ Click chu·ªôt ph·∫£i tray: Menu t√πy ch·ªçn");
        }

        /// <summary>
        /// Hi·ªÉn th·ªã Windows notification
        /// </summary>
        private void ShowNotification(string message)
        {
            if (config.ShowTrayIcon && trayIcon.Visible)
            {
                trayIcon.ShowBalloonTip(4000, "Hotkey Manager", message, ToolTipIcon.Info);
            }
            else
            {
                // N·∫øu tray icon b·ªã ·∫©n, s·ª≠ d·ª•ng MessageBox t·∫°m th·ªùi
                MessageBox.Show(message, "Hotkey Manager", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        /// <summary>
        /// Reset security state (ch·ªâ d√†nh cho admin/debug)
        /// </summary>
        private void ResetSecurity()
        {
            var result = MessageBox.Show(
                "B·∫°n c√≥ ch·∫Øc mu·ªën reset tr·∫°ng th√°i b·∫£o m·∫≠t?\n\n" +
                "‚ö†Ô∏è Thao t√°c n√†y s·∫Ω:\n" +
                "‚Ä¢ X√≥a t·∫•t c·∫£ l·∫ßn nh·∫≠p sai\n" +
                "‚Ä¢ M·ªü kh√≥a n·∫øu ƒëang b·ªã lockdown\n" +
                "‚Ä¢ Ghi log s·ª± ki·ªán reset\n\n" +
                "Ch·ªâ th·ª±c hi·ªán khi b·∫°n ch·∫Øc ch·∫Øn!",
                "üîß Reset Security", 
                MessageBoxButtons.YesNo, 
                MessageBoxIcon.Warning
            );

            if (result == DialogResult.Yes)
            {
                // Reset security state th√¥ng qua reflection ho·∫∑c public method
                // T·∫°m th·ªùi t·∫°o SecurityManager m·ªõi
                security = new SecurityManager(config);
                ShowNotification("üîÑ Tr·∫°ng th√°i b·∫£o m·∫≠t ƒë√£ ƒë∆∞·ª£c reset!");
            }
        }

        static HotkeyType CheckHotkeySequence(ref bool hasPressedK, ref DateTime lastK)
        {
            // Ph√°t hi·ªán Ctrl+K
            if ((GetAsyncKeyState(Keys.ControlKey) & 0x8000) != 0 &&
                (GetAsyncKeyState(Keys.K) & 0x8000) != 0)
            {
                if (!hasPressedK)
                {
                    hasPressedK = true;
                    lastK = DateTime.Now;
                }
            }

            // Ki·ªÉm tra c√°c hotkey combination trong th·ªùi gian 2.5 gi√¢y
            if (hasPressedK && (DateTime.Now - lastK).TotalSeconds < 2.5)
            {
                // Ctrl+K r·ªìi Ctrl+8 (hi·ªÉn th·ªã 2FA popup)
                if ((GetAsyncKeyState(Keys.ControlKey) & 0x8000) != 0 &&
                    (GetAsyncKeyState(Keys.D8) & 0x8000) != 0)
                {
                    hasPressedK = false;
                    return HotkeyType.Show2FA;
                }

                // Ctrl+K r·ªìi Ctrl+T (toggle tray icon)
                if ((GetAsyncKeyState(Keys.ControlKey) & 0x8000) != 0 &&
                    (GetAsyncKeyState(Keys.T) & 0x8000) != 0)
                {
                    hasPressedK = false;
                    return HotkeyType.ToggleTray;
                }
            }

            // Reset n·∫øu qu√° th·ªùi gian ch·ªù
            if (hasPressedK && (DateTime.Now - lastK).TotalSeconds >= 2.5)
            {
                hasPressedK = false;
            }

            return HotkeyType.None;
        }

        class TwoFAPopup : Form
        {
            private TextBox tb = null!;
            private Button btnOK = null!;
            private Label statusLabel = null!;
            [Browsable(false)]
            [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public string? Code { get; private set; } = null;

            public TwoFAPopup(SecurityManager? securityManager = null)
            {
                Width = 300;
                Height = 180;
                StartPosition = FormStartPosition.CenterScreen;
                TopMost = true;
                FormBorderStyle = FormBorderStyle.FixedToolWindow;
                ShowInTaskbar = false;
                Text = "üîê 2FA Authentication";
                KeyPreview = true;

                // Header label
                Label headerLbl = new Label  { Text = "Nh·∫≠p m√£ 2FA:",  Left = 20,   Width = 250, Font = new System.Drawing.Font("Segoe UI", 10, FontStyle.Bold) };
                
                // Input section
                Label lbl = new Label { Text = "M√£:", Left = 20, Top = 45, Width = 35 };
                tb = new TextBox 
                { 
                    Left = 60, Top = 42, Width = 200, PasswordChar = '‚Ä¢', Font = new System.Drawing.Font("Segoe UI", 14), MaxLength = 10
                };
                
                // Security status
                statusLabel = new Label
                {
                    Left = 20, Top = 75, Width = 250, Height = 25, Font = new System.Drawing.Font("Segoe UI", 9), ForeColor = Color.DarkBlue, Text = securityManager?.GetStatusMessage() ?? "üîì B·∫£o m·∫≠t b√¨nh th∆∞·ªùng"
                };

                // Buttons
                btnOK = new Button 
                { 
                    Text = "X√°c nh·∫≠n", Left = 90, Top = 110, Width = 80, Height = 35, Font = new System.Drawing.Font("Segoe UI", 10), BackColor = Color.FromArgb(0, 122, 204), ForeColor = Color.White, FlatStyle = FlatStyle.Flat
                };
                
                var btnCancel = new Button
                {
                    Text = "H·ªßy", Left = 180, Top = 110, Width = 80, Height = 35, Font = new System.Drawing.Font("Segoe UI", 10), BackColor = Color.Gray, ForeColor = Color.White, FlatStyle = FlatStyle.Flat
                };

                btnOK.Click += (s, e) => { Code = tb.Text; DialogResult = DialogResult.OK; Close(); };
                btnCancel.Click += (s, e) => { DialogResult = DialogResult.Cancel; Close(); };

                Controls.Add(headerLbl);
                Controls.Add(lbl);
                Controls.Add(tb);
                Controls.Add(statusLabel);
                Controls.Add(btnOK);
                Controls.Add(btnCancel);

                // Auto timeout
                var tmr = new System.Windows.Forms.Timer { Interval = 30000 };
                tmr.Tick += (s, e) => { DialogResult = DialogResult.Cancel; Close(); };
                tmr.Start();

                // Enter key handling
                tb.KeyDown += (s, e) => { if (e.KeyCode == Keys.Enter) btnOK.PerformClick(); };
                
                // ESC key handling
                this.KeyDown += (s, e) =>
                {
                    if (e.KeyCode == Keys.Escape)
                    {
                        DialogResult = DialogResult.Cancel;
                        Close();
                    }
                };
            }

            protected override void OnShown(EventArgs e)
            {
                base.OnShown(e);
                tb.Focus();
                tb.Select();
            }

            public static string? ShowPopup(SecurityManager? securityManager = null)
            {
                using (var box = new TwoFAPopup(securityManager))
                {
                    var result = box.ShowDialog();
                    return result == DialogResult.OK ? box.Code : null;
                }
            }
        }

        bool Verify2FA(string inputCode) => inputCode == config.Valid2FA;

        async Task<bool> SendD1RequestAsync()
        {
            try
            {
                using (var client = new HttpClient())
                {
                    client.DefaultRequestHeaders.Add("Authorization", config.ApiToken);
                    HttpResponseMessage resp = await client.GetAsync(config.ApiEndpoint);
                    var body = await resp.Content.ReadAsStringAsync();
                    File.AppendAllText("request_log.txt", DateTime.Now + " - " + body + Environment.NewLine);
                    return resp.IsSuccessStatusCode;
                }
            }
            catch (Exception ex)
            {
                File.AppendAllText("request_log.txt", DateTime.Now + " - ERROR: " + ex.Message + Environment.NewLine);
                return false;
            }
        }
    }
}
