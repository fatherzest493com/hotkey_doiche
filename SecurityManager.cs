namespace HotkeyManager
{
    /// <summary>
    /// Qu·∫£n l√Ω b·∫£o m·∫≠t v√† ch·ªëng brute force attack
    /// </summary>
    public class SecurityManager
    {
        private readonly AppConfig config;
        private int failedAttempts = 0;
        private DateTime? lockdownUntil = null;
        private bool isLocked = false;

        // Constants for security settings
        private const int MAX_FAILED_ATTEMPTS = 3;
        private const int LOCKDOWN_MINUTES = 30; // Kh√≥a 30 ph√∫t sau 3 l·∫ßn sai
        private static readonly string SecurityLogPath = Path.Combine(
            Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),
            "HotkeyManager",
            "security.log"
        );
        // Console.WriteLine("üí´ SecurityLogPath üí´: " + SecurityLogPath);

        public SecurityManager(AppConfig appConfig)
        {
            config = appConfig;
            LoadSecurityState();
        }

        /// Ki·ªÉm tra xem c√≥ ƒëang b·ªã lock kh√¥ng
        /// </summary>
        public bool IsLocked
        {
            get
            {
                // Ki·ªÉm tra xem ƒë√£ h·∫øt th·ªùi gian lock ch∆∞a
                if (lockdownUntil.HasValue && DateTime.Now >= lockdownUntil.Value)
                {
                    UnlockSecurity();
                    return false;
                }
                return isLocked;
            }
        }

        /// <summary>
        /// S·ªë l·∫ßn nh·∫≠p sai hi·ªán t·∫°i
        /// </summary>
        public int FailedAttempts => failedAttempts;

        /// <summary>
        /// Th·ªùi gian c√≤n l·∫°i c·ªßa lockdown
        /// </summary>
        public TimeSpan? TimeRemaining
        {
            get
            {
                if (!lockdownUntil.HasValue) return null;
                var remaining = lockdownUntil.Value - DateTime.Now;
                return remaining.TotalSeconds > 0 ? remaining : null;
            }
        }

        /// <summary>
        /// X·ª≠ l√Ω khi nh·∫≠p ƒë√∫ng 2FA
        /// </summary>
        public void OnSuccessfulAuth()
        {
            if (failedAttempts > 0)
            {
                LogSecurityEvent($"‚úÖ 2FA successful after {failedAttempts} failed attempts");
                ResetFailedAttempts();
            }
        }

        /// <summary>
        /// X·ª≠ l√Ω khi nh·∫≠p sai 2FA
        /// </summary>
        public async Task<bool> OnFailedAuthAsync(string attemptedCode)
        {
            failedAttempts++;
            LogSecurityEvent($"‚ùå 2FA failed attempt #{failedAttempts} - Code: {MaskCode(attemptedCode)}");

            SaveSecurityState();

            if (failedAttempts >= MAX_FAILED_ATTEMPTS)
            {
                await HandleSecurityBreachAsync();
                return true; // ƒê√£ trigger security breach
            }

            return false; // Ch∆∞a ƒë·∫øn ng∆∞·ª°ng
        }

        /// <summary>
        /// X·ª≠ l√Ω khi vi ph·∫°m b·∫£o m·∫≠t (3 l·∫ßn sai)
        /// </summary>
        private async Task HandleSecurityBreachAsync()
        {
            isLocked = true;
            lockdownUntil = DateTime.Now.AddMinutes(LOCKDOWN_MINUTES);

            LogSecurityEvent($"üö® SECURITY BREACH! Lockdown activated until {lockdownUntil:yyyy-MM-dd HH:mm:ss}");

            // G·ª≠i request l√™n server ƒë·ªÉ h·ªßy/thay ƒë·ªïi m√£ 2FA
            bool revoked = await RevokeCurrentTwoFAAsync();

            if (revoked)
            {
                LogSecurityEvent("üîí 2FA code revoked successfully on server");
                // T·∫°o m√£ 2FA m·ªõi
                await GenerateNew2FAAsync();
            }
            else
            {
                LogSecurityEvent("‚ö†Ô∏è Failed to revoke 2FA code on server");
            }

            SaveSecurityState();
        }

        /// <summary>
        /// G·ª≠i request l√™n server D1 ƒë·ªÉ h·ªßy m√£ 2FA hi·ªán t·∫°i
        /// </summary>
        private async Task<bool> RevokeCurrentTwoFAAsync()
        {
            try
            {
                using (var client = new HttpClient())
                {
                    client.DefaultRequestHeaders.Add("Authorization", config.ApiToken);

                    // T·∫°o request body v·ªõi th√¥ng tin security breach
                    var revokeData = new
                    {
                        action = "revoke_2fa",
                        reason = "security_breach",
                        failed_attempts = failedAttempts,
                        timestamp = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ssZ"),
                        client_id = Environment.MachineName + "_" + Environment.UserName
                    };

                    var json = System.Text.Json.JsonSerializer.Serialize(revokeData);
                    var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                    // G·ª≠i POST request ƒë·ªÉ revoke
                    var response = await client.PostAsync($"{config.ApiEndpoint}/revoke-2fa", content);

                    LogSecurityEvent($"üì° Revoke request sent - Status: {response.StatusCode}");

                    return response.IsSuccessStatusCode;
                }
            }
            catch (Exception ex)
            {
                LogSecurityEvent($"üí• Error revoking 2FA: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// T·∫°o m√£ 2FA m·ªõi t·ª´ server
        /// </summary>
        private async Task GenerateNew2FAAsync()
        {
            try
            {
                using (var client = new HttpClient())
                {
                    client.DefaultRequestHeaders.Add("Authorization", config.ApiToken);

                    var response = await client.PostAsync($"{config.ApiEndpoint}/generate-new-2fa", null);

                    if (response.IsSuccessStatusCode)
                    {
                        var responseBody = await response.Content.ReadAsStringAsync();
                        var newData = System.Text.Json.JsonSerializer.Deserialize<dynamic>(responseBody);

                        // C·∫≠p nh·∫≠t config v·ªõi m√£ m·ªõi (n·∫øu server tr·∫£ v·ªÅ)
                        LogSecurityEvent($"üîÑ New 2FA generated: {responseBody}");
                    }
                }
            }
            catch (Exception ex)
            {
                LogSecurityEvent($"üí• Error generating new 2FA: {ex.Message}");
            }
        }

        /// <summary>
        /// M·ªü kh√≥a security khi h·∫øt th·ªùi gian
        /// </summary>
        private void UnlockSecurity()
        {
            isLocked = false;
            lockdownUntil = null;
            ResetFailedAttempts();
            LogSecurityEvent("üîì Security lockdown expired - System unlocked");
            SaveSecurityState();
        }

        /// <summary>
        /// Reset s·ªë l·∫ßn nh·∫≠p sai
        /// </summary>
        private void ResetFailedAttempts()
        {
            failedAttempts = 0;
            SaveSecurityState();
        }

        /// <summary>
        /// Che m√£ code trong log ƒë·ªÉ b·∫£o m·∫≠t
        /// </summary>
        private string MaskCode(string code)
        {
            if (string.IsNullOrEmpty(code)) return "***";
            if (code.Length <= 2) return new string('*', code.Length);
            return code.Substring(0, 1) + new string('*', code.Length - 2) + code.Substring(code.Length - 1);
        }

        /// <summary>
        /// Ghi log s·ª± ki·ªán b·∫£o m·∫≠t
        /// </summary>
        private void LogSecurityEvent(string message)
        {
            try
            {
                var logDir = Path.GetDirectoryName(SecurityLogPath);
                if (!Directory.Exists(logDir))
                {
                    Directory.CreateDirectory(logDir!);
                }

                var logEntry = $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] {message}{Environment.NewLine}";
                File.AppendAllText(SecurityLogPath, logEntry);
            }
            catch
            {
                // Kh√¥ng crash ·ª©ng d·ª•ng n·∫øu kh√¥ng ghi ƒë∆∞·ª£c log
            }
        }

        /// <summary>
        /// L∆∞u tr·∫°ng th√°i security v√†o file
        /// </summary>
        private void SaveSecurityState()
        {
            try
            {
                var securityState = new
                {
                    FailedAttempts = failedAttempts,
                    IsLocked = isLocked,
                    LockdownUntil = lockdownUntil?.ToString("yyyy-MM-ddTHH:mm:ssZ")
                };

                var securityPath = Path.Combine(
                    Path.GetDirectoryName(SecurityLogPath)!,
                    "security_state.json"
                );
                Console.WriteLine("üí´ SecurityState: " + securityState);

                var json = System.Text.Json.JsonSerializer.Serialize(securityState, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
                File.WriteAllText(securityPath, json);
            }
            catch
            {
                // Silent fail
            }
        }

        /// <summary>
        /// Kh√¥i ph·ª•c tr·∫°ng th√°i security t·ª´ file
        /// </summary>
        private void LoadSecurityState()
        {
            try
            {
                var securityPath = Path.Combine(
                    Path.GetDirectoryName(SecurityLogPath)!,
                    "security_state.json"
                );

                if (File.Exists(securityPath))
                {
                    var json = File.ReadAllText(securityPath);
                    using var doc = System.Text.Json.JsonDocument.Parse(json);
                    var root = doc.RootElement;

                    if (root.TryGetProperty("FailedAttempts", out var attemptsElement))
                        failedAttempts = attemptsElement.GetInt32();

                    if (root.TryGetProperty("IsLocked", out var lockedElement))
                        isLocked = lockedElement.GetBoolean();

                    if (root.TryGetProperty("LockdownUntil", out var lockdownElement) &&
                        lockdownElement.GetString() is string lockdownStr &&
                        DateTime.TryParse(lockdownStr, out var lockdownTime))
                    {
                        lockdownUntil = lockdownTime;
                    }

                    // Ki·ªÉm tra xem lockdown ƒë√£ h·∫øt h·∫°n ch∆∞a
                    if (lockdownUntil.HasValue && DateTime.Now >= lockdownUntil.Value)
                    {
                        UnlockSecurity();
                    }
                }
            }
            catch
            {
                // Reset to default state if can't load
                failedAttempts = 0;
                isLocked = false;
                lockdownUntil = null;
            }
        }

        /// <summary>
        /// L·∫•y th√¥ng b√°o tr·∫°ng th√°i cho user
        /// </summary>
        public string GetStatusMessage()
        {
            if (IsLocked)
            {
                var remaining = TimeRemaining;
                if (remaining.HasValue)
                {
                    return $"üîí B·ªã kh√≥a do nh·∫≠p sai 2FA {MAX_FAILED_ATTEMPTS} l·∫ßn!\n" +
                           $"Th·ªùi gian m·ªü kh√≥a: {remaining.Value.Minutes}p {remaining.Value.Seconds}s";
                }
            }

            if (failedAttempts > 0)
            {
                return $"‚ö†Ô∏è ƒê√£ nh·∫≠p sai {failedAttempts}/{MAX_FAILED_ATTEMPTS} l·∫ßn";
            }

            return "üîì B·∫£o m·∫≠t b√¨nh th∆∞·ªùng";
        }
    }
}